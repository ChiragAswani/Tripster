{"ast":null,"code":"import _classCallCheck from \"/Users/kg2alex/Documents/GitHub/Tripster/tripster-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kg2alex/Documents/GitHub/Tripster/tripster-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kg2alex/Documents/GitHub/Tripster/tripster-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kg2alex/Documents/GitHub/Tripster/tripster-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kg2alex/Documents/GitHub/Tripster/tripster-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kg2alex/Documents/GitHub/Tripster/tripster-react/src/App.js\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper, Polygon, Polyline } from 'google-maps-react';\nimport React from 'react';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';\nexport var MapContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MapContainer, _React$Component);\n\n  function MapContainer(props) {\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapContainer).call(this, props));\n\n    _this.handleChange = function (origin_address) {\n      _this.setState({\n        origin_address: origin_address\n      });\n    };\n\n    _this.handleSelect = function (origin_address) {\n      geocodeByAddress(origin_address).then(function (results) {\n        return getLatLng(results[0]);\n      }).then(function (latLng) {\n        return console.log('Success', latLng);\n      }).catch(function (error) {\n        return console.error('Error', error);\n      });\n\n      _this.setState({\n        origin_address: origin_address\n      });\n    };\n\n    _this.state = {\n      origin_address: ''\n    };\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"render\",\n    value: function render() {\n      // const triangleCoords = [\n      //     {lat: 37.759703, lng: -122.428093},\n      //     {lat: 37.7614169, lng: -122.4240931},\n      //\n      // ];\n      var triangleCoords = [{\n        lat: 37.759703,\n        lng: -122.428093\n      }, {\n        lat: 37.7612896,\n        lng: -122.4283997\n      }, {\n        lat: 37.7615595,\n        lng: -122.4241079\n      }, {\n        lat: 37.7614169,\n        lng: -122.4240931\n      }];\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(PlacesAutocomplete, {\n        value: this.state.origin_address,\n        onChange: this.handleChange,\n        onSelect: this.handleSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, function (_ref) {\n        var getInputProps = _ref.getInputProps,\n            suggestions = _ref.suggestions,\n            getSuggestionItemProps = _ref.getSuggestionItemProps,\n            loading = _ref.loading;\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(\"input\", Object.assign({}, getInputProps({\n          placeholder: 'Origin',\n          className: 'location-search-input'\n        }), {\n          style: {\n            'width': '100%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"autocomplete-dropdown-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, loading && React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, \"Loading...\"), suggestions.map(function (suggestion) {\n          var className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n          var style = suggestion.active ? {\n            backgroundColor: '#fafafa',\n            cursor: 'pointer'\n          } : {\n            backgroundColor: '#ffffff',\n            cursor: 'pointer'\n          };\n          return React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n            className: className,\n            style: style\n          }), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69\n            },\n            __self: this\n          }), React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }, suggestion.description));\n        })));\n      }), React.createElement(PlacesAutocomplete, {\n        value: this.state.destination_address,\n        onChange: this.handleChange,\n        onSelect: this.handleSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, function (_ref2) {\n        var getInputProps = _ref2.getInputProps,\n            suggestions = _ref2.suggestions,\n            getSuggestionItemProps = _ref2.getSuggestionItemProps,\n            loading = _ref2.loading;\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, React.createElement(\"input\", Object.assign({}, getInputProps({\n          placeholder: 'Destination',\n          className: 'location-search-input'\n        }), {\n          style: {\n            'width': '100%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"autocomplete-dropdown-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, loading && React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, \"Loading...\"), suggestions.map(function (suggestion) {\n          var className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n          var style = suggestion.active ? {\n            backgroundColor: '#fafafa',\n            cursor: 'pointer'\n          } : {\n            backgroundColor: '#ffffff',\n            cursor: 'pointer'\n          };\n          return React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n            className: className,\n            style: style\n          }), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109\n            },\n            __self: this\n          }), React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115\n            },\n            __self: this\n          }, suggestion.description));\n        })));\n      }), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Calculate\"), React.createElement(Map, {\n        google: this.props.google,\n        zoom: 14,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Marker, {\n        name: 'Dolores park',\n        position: {\n          lat: 37.759703,\n          lng: -122.428093\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(Marker, {\n        name: 'Tartine Bakery',\n        position: {\n          lat: 37.7614169,\n          lng: -122.4240931\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), React.createElement(Polyline, {\n        path: triangleCoords,\n        strokeColor: \"#0000FF\",\n        strokeOpacity: 4,\n        strokeWeight: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MapContainer;\n}(React.Component);\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyChbG4vc4a01alWP7RYrMvWd911uhGzOdo\\n\"\n})(MapContainer);","map":{"version":3,"sources":["/Users/kg2alex/Documents/GitHub/Tripster/tripster-react/src/App.js"],"names":["Map","InfoWindow","Marker","GoogleApiWrapper","Polygon","Polyline","React","PlacesAutocomplete","geocodeByAddress","geocodeByPlaceId","getLatLng","MapContainer","props","handleChange","origin_address","setState","handleSelect","then","results","latLng","console","log","catch","error","state","triangleCoords","lat","lng","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description","destination_address","google","Component","apiKey"],"mappings":"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","sourcesContent":["import {Map, InfoWindow, Marker, GoogleApiWrapper, Polygon, Polyline} from 'google-maps-react';\nimport React from 'react'\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport {\n    geocodeByAddress,\n    geocodeByPlaceId,\n    getLatLng,\n} from 'react-places-autocomplete';\n\nexport class MapContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { origin_address: '' };\n    }\n    handleChange = origin_address => {\n        this.setState({ origin_address });\n    };\n\n    handleSelect = origin_address => {\n\n        geocodeByAddress(origin_address)\n            .then(results => getLatLng(results[0]))\n            .then(latLng => console.log('Success', latLng))\n            .catch(error => console.error('Error', error));\n        this.setState({origin_address})\n    };\n    render() {\n        // const triangleCoords = [\n        //     {lat: 37.759703, lng: -122.428093},\n        //     {lat: 37.7614169, lng: -122.4240931},\n        //\n        // ];\n        const triangleCoords = [\n            {lat: 37.759703, lng: -122.428093},\n            {lat: 37.7612896, lng: -122.4283997},\n            {lat: 37.7615595, lng: -122.4241079},\n            {lat: 37.7614169, lng: -122.4240931},\n\n        ];\n\n        return (\n            <div>\n\n                <PlacesAutocomplete\n                    value={this.state.origin_address}\n                    onChange={this.handleChange}\n                    onSelect={this.handleSelect}\n                >\n                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                        <div>\n                            <input\n                                {...getInputProps({\n                                    placeholder: 'Origin',\n                                    className: 'location-search-input',\n                                })}\n                                style={{'width': '100%'}}\n                            />\n                            <div className=\"autocomplete-dropdown-container\">\n                                {loading && <div>Loading...</div>}\n                                {suggestions.map(suggestion => {\n                                    const className = suggestion.active\n                                        ? 'suggestion-item--active'\n                                        : 'suggestion-item';\n                                    // inline style for demonstration purpose\n                                    const style = suggestion.active\n                                        ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                                        : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                                    return (\n                                        <div\n                                            {...getSuggestionItemProps(suggestion, {\n                                                className,\n                                                style,\n                                            })}\n                                        >\n                                            <span>{suggestion.description}</span>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                    )}\n                </PlacesAutocomplete>\n\n                <PlacesAutocomplete\n                    value={this.state.destination_address}\n                    onChange={this.handleChange}\n                    onSelect={this.handleSelect}\n                >\n                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                        <div>\n                            <input\n                                {...getInputProps({\n                                    placeholder: 'Destination',\n                                    className: 'location-search-input',\n                                })}\n                                style={{'width': '100%'}}\n                            />\n                            <div className=\"autocomplete-dropdown-container\">\n                                {loading && <div>Loading...</div>}\n                                {suggestions.map(suggestion => {\n                                    const className = suggestion.active\n                                        ? 'suggestion-item--active'\n                                        : 'suggestion-item';\n                                    // inline style for demonstration purpose\n                                    const style = suggestion.active\n                                        ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                                        : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                                    return (\n                                        <div\n                                            {...getSuggestionItemProps(suggestion, {\n                                                className,\n                                                style,\n                                            })}\n                                        >\n                                            <span>{suggestion.description}</span>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                    )}\n                </PlacesAutocomplete>\n\n\n\n                <button>Calculate</button>\n                <Map google={this.props.google} zoom={14}>\n                    <Marker\n                        name={'Dolores park'}\n                        position={{lat: 37.759703, lng: -122.428093}} />\n                    <Marker\n                        name={'Tartine Bakery'}\n                        position={{lat: 37.7614169, lng: -122.4240931}} />\n\n\n                    <Polyline\n                        path={triangleCoords}\n                        strokeColor=\"#0000FF\"\n                        strokeOpacity={4}\n                        strokeWeight={10} />\n                </Map>\n            </div>\n\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyChbG4vc4a01alWP7RYrMvWd911uhGzOdo\\n\")\n})(MapContainer)\n"]},"metadata":{},"sourceType":"module"}